package fr.airpure.main;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.web.client.RestTemplate;

import fr.airpure.main.TrainREST.Quote;
import fr.airpure.main.autoGenerated.IndicateurPollutionAir;
import fr.airpure.main.autoGenerated.Properties;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.PropertySource;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import org.springframework.web.filter.CorsFilter;


/**
 * The Class AirPureApplication.
 */
@SpringBootApplication
@PropertySource("classpath:application.properties")
public class AirPureApplication {

	/**
	 * Logger pour afficher les infos de l'extractions de l'API ATMO
	 */
	private static final Logger log = LoggerFactory.getLogger(AirPureApplication.class);

	/**
	 * The main method.
	 *
	 * @param args the arguments
	 */
	public static void main(String[] args) {
		SpringApplication.run(AirPureApplication.class, args);
	}
	
	/**
	 * Permets de construire un RestTemplate qui utilise la bibliothÃ¨que JSON pour parse les Data de l'API en objets
	 * @param builder
	 * @return
	 */
	@Bean
	public RestTemplate restTemplateMain(RestTemplateBuilder builder) {
		return builder.build();
	}
	
	/**
	 * Run le {@link restTemplateMain} et le logger.
	 * @param restTemplate
	 * @return
	 * @throws Exception
	 */

	@Bean
	public CommandLineRunner run(RestTemplate restTemplate) throws Exception {
		return args -> {
			IndicateurPollutionAir obj = restTemplate.getForObject(
					"https://opendata.arcgis.com/datasets/4a648b54876f485e92f22e2ad5a5da32_0.geojson", IndicateurPollutionAir.class);
			log.info(obj.toString());
			
			System.out.println(obj.toString());
		};
	}
  
  	@Bean
	public CorsFilter corsFilter() {
		UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
		CorsConfiguration config = new CorsConfiguration();
		config.addAllowedOrigin("*");
		config.addAllowedHeader("*");
		config.addAllowedMethod("OPTIONS");
		config.addAllowedMethod("GET");
		config.addAllowedMethod("POST");
		config.addAllowedMethod("PUT");
		config.addAllowedMethod("DELETE");
		source.registerCorsConfiguration("/**", config);
		return new CorsFilter(source);
	}


}
