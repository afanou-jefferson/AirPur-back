package fr.airpure.main;

import java.time.LocalDateTime;
import java.util.List;

import javax.transaction.Transactional;

import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.web.client.RestTemplate;

import fr.airpure.main.TrainREST.Quote;
import fr.airpure.main.autoGenerated.ApiPollutionResponse;
import fr.airpure.main.autoGenerated.Properties;
import fr.airpure.main.entities.MeteoIndicateur;


import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.PropertySource;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import org.springframework.web.filter.CorsFilter;


import fr.airpure.main.autoGenerated.ApiMeteoResponse;
import fr.airpure.main.autoGenerated.Forecast;
import fr.airpure.main.entities.Commune;
import fr.airpure.main.entities.MeteoIndicateur;
import fr.airpure.main.repositories.MeteoRepository;
import fr.airpure.main.services.ExtractPolluantService;


/**
 * The Class AirPureApplication.
 */
@SpringBootApplication
@PropertySource("classpath:application.properties")
@Transactional
@EnableScheduling
public class AirPureApplication {
	private ExtractPolluantService extractPolluantService;
	private MeteoRepository meteoRepository;
	
	public AirPureApplication(ExtractPolluantService extractPolluantService, MeteoRepository meteoRepository) {
		this.extractPolluantService = extractPolluantService;
		this.meteoRepository = meteoRepository;
	}
	

	/**
	 * The main method.
	 *
	 * @param args the arguments
	 */
	public static void main(String[] args) {
		SpringApplication.run(AirPureApplication.class, args);
	}

	/**
	 * Permets de construire un RestTemplate qui utilise la bibliothÃ¨que JSON pour
	 * parse les Data de l'API en objets
	 * 
	 * @param builder
	 * @return
	 */
	@Bean
	public RestTemplate restTemplateMain(RestTemplateBuilder builder) {
		return builder.build();
	}

	/**
	 * Run le {@link restTemplateMain} et le logger.
	 * 
	 * @param restTemplate
	 * @return
	 * @throws Exception
	 */

	@Bean
	//@Scheduled(fixedRate=60*60*1000)
	public CommandLineRunner run(RestTemplate restTemplate) throws Exception {
		return args -> {

			// RECUPERER TOP 50 VILLE
			System.out.println("DEBUT DU PROGRAMME");
			String token = "8c7d59aba8b61f1963ff816bd5cc05abbd35ee37cbe0848b2862a18a46973402";
			List<Commune> communesList = this.extractPolluantService.getTop50Population();
			// PARCOURIRE LE TOP 50
			
			for(Commune commune : communesList) {
				System.out.println("TRAITEMENT " + commune.getNomCommune());
				// POUR CHAQUE COMMUNE PREND LE CODE INSEE ET LE METTRE EN PARAM DE LA REQUETE
				String url = "https://api.meteo-concept.com/api/forecast/nextHours?token=" + token + "&insee=" + commune.getCodeInseeCommune();
				ApiMeteoResponse meteoListe = restTemplate.getForObject(url, ApiMeteoResponse.class);
				System.out.println(commune.getNomCommune());
				for(Forecast forecast : meteoListe.getForecast()) {
					System.out.println("CREATION FORECAST");
					LocalDateTime date = this.extractPolluantService.parseAndConverteForcaste(forecast.getDatetime());
					// CREER UN OBJET METEO INDICATEUR
					// LE LIER A UNE COMMUNE
					MeteoIndicateur meteoIndicateur = new MeteoIndicateur(date, forecast.getDirwind10m(), forecast.getRr10(), forecast.getTsoil2(), commune);
					// LE PERSISTER EN BASE
					this.meteoRepository.save(meteoIndicateur);
					System.out.println("FORECAST CREE ET PERSISTER");
				}
			}
			
			System.out.println("FIN DU PROGRAMME");
				//this.extractPolluantService.extract(restTemplate);
			};
	}


	@Bean
	public CorsFilter corsFilter() {
		UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
		CorsConfiguration config = new CorsConfiguration();
		config.addAllowedOrigin("*");
		config.addAllowedHeader("*");
		config.addAllowedMethod("OPTIONS");
		config.addAllowedMethod("GET");
		config.addAllowedMethod("POST");
		config.addAllowedMethod("PUT");
		config.addAllowedMethod("DELETE");
		source.registerCorsConfiguration("/**", config);
		return new CorsFilter(source);
	}

}
