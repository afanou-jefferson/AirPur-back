package fr.airpure.main;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.PropertySource;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import org.springframework.web.filter.CorsFilter;

import fr.airpure.main.autoGenerated.Feature;
import fr.airpure.main.autoGenerated.IndicateurPollutionAir;
import fr.airpure.main.entities.Polluant;
import fr.airpure.main.entities.Station;

/**
 * The Class AirPureApplication.
 */
@SpringBootApplication
@PropertySource("classpath:application.properties")
public class AirPureApplication {

	/**
	 * Logger pour afficher les infos de l'extractions de l'API ATMO
	 */
	private static final Logger log = LoggerFactory.getLogger(AirPureApplication.class);

	/**
	 * The main method.
	 *
	 * @param args the arguments
	 */
	public static void main(String[] args) {
		SpringApplication.run(AirPureApplication.class, args);
	}

	/**
	 * Permets de construire un RestTemplate qui utilise la bibliothÃ¨que JSON pour
	 * parse les Data de l'API en objets
	 * 
	 * @param builder
	 * @return
	 */
	@Bean
	public RestTemplate restTemplateMain(RestTemplateBuilder builder) {
		return builder.build();
	}

	/**
	 * Run le {@link restTemplateMain} et le logger.
	 * 
	 * @param restTemplate
	 * @return
	 * @throws Exception
	 */

	@Bean
	public CommandLineRunner run(RestTemplate restTemplate) throws Exception {
		return args -> {
			
			IndicateurPollutionAir qualiteAirListe = restTemplate.getForObject("https://opendata.arcgis.com/datasets/4a648b54876f485e92f22e2ad5a5da32_0.geojson", IndicateurPollutionAir.class);

			String sql = "SELECT C2.id FROM commune as C2 \r\n"
					+ "INNER JOIN departement ON C2.departement_id = departement.id\r\n"
					+ "INNER JOIN region ON region.id = departement.region_id\r\n"
					+ "WHERE region.id = 5";


			List<Feature> maListe = qualiteAirListe.getFeatures();
			
			DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"); 

			for (Feature m : maListe) {
				// POUR CHAQUE LIGNE JE CREAIS UN POLLUANT ET UNE STATION
				//JE CONVERTIS LES PROPRIETEES STRING RECUPERER EN LOCALDATETIME
				LocalDateTime dateDebut = LocalDateTime.parse(m.getProperties().getDateDebut(), formatter);
				LocalDateTime dateFin = LocalDateTime.parse(m.getProperties().getDateFin(), formatter);		
				
				Polluant polluant = new Polluant(m.getProperties().getNomPoll(),  
												m.getProperties().getValeur(),
												m.getProperties().getMetrique(), 
												dateDebut, 
												dateFin);
				
				Station station = new Station(m.getProperties().getNomStation(), 
											String.valueOf(m.getProperties().getyL93()), 
											String.valueOf(m.getProperties().getxL93()));
//				System.out.println(m.getProperties().getxL93());
//				System.out.println(m.getProperties().getyL93());
//				System.out.println(m.getProperties().getInseeCom());
//				System.out.println(m.getProperties().getNomCom());
					//insertion sql Latitude
//				String sql2 = "UPDATE commune as C" + " SET C.latitude = '"+ m.getProperties().getxL93() + "' " + " WHERE C.id IN ( "+ sql + ");";
//				//st.executeUpdate(sql2);
				//insertion sql Longitude
				//String sql3 = "UPDATE commune " + " SET longitude = '"+ m.getProperties().getyL93() + "' " + " WHERE code_insee='"+ m.getProperties().getInseeCom() + "';";
				//st.executeUpdate(sql3);	
				
				//String optiUpdate =  "UPDATE commune " + " SET latitude = '"+ m.getProperties().getxL93() + "' " + " WHERE commune.id IN' "+ sql; 
			}
		
		};
	
	}


	@Bean
	public CorsFilter corsFilter() {
		UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
		CorsConfiguration config = new CorsConfiguration();
		config.addAllowedOrigin("*");
		config.addAllowedHeader("*");
		config.addAllowedMethod("OPTIONS");
		config.addAllowedMethod("GET");
		config.addAllowedMethod("POST");
		config.addAllowedMethod("PUT");
		config.addAllowedMethod("DELETE");
		source.registerCorsConfiguration("/**", config);
		return new CorsFilter(source);
	}

}
