package fr.airpure.main.services;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.springframework.stereotype.Service;

import fr.airpure.main.autoGenerated.Feature;
import fr.airpure.main.entities.Polluant;
import fr.airpure.main.exceptions.echange.NotFoundException;
import fr.airpure.main.repositories.PolluantRepository;

@Service
public class PolluantService {
	private PolluantRepository polluantRepository;

	public PolluantService(PolluantRepository polluantRepository) {
		this.polluantRepository = polluantRepository;
	}

	public Polluant creer(Feature m, LocalDateTime dateDebutAnalyse, LocalDateTime dateFinAnalyse) {
		return new Polluant(m.getProperties().getNomPoll(), m.getProperties().getValeur(),
				m.getProperties().getMetrique(), dateDebutAnalyse, dateFinAnalyse);
	}

	public Polluant save(Polluant polluant) {
		return this.polluantRepository.save(polluant);
	}

	public List<Polluant> getDernierPolluantByStation(Integer idStation) throws NotFoundException {
		return this.polluantRepository.getDernierPolluantByStation(idStation);
	}
	
	public void deletePolluant(Polluant toDelete) {
		this.polluantRepository.delete(toDelete);
	}
	
	public List<Polluant> getPolluantByIdStationAndNomAndDateDebut(Integer idStation, String nom, LocalDateTime dateDebut){
		return this.polluantRepository.findPolluantsByIdStationAndNomAndDateDebut(idStation, nom, dateDebut);
	}
	
	public List<Polluant> getHistoriquePolluantsStation(int idCommune, LocalDateTime dateDebut, LocalDateTime dateFin ){
		//return this.polluantRepository.findPolluantsByDatesAndStationId(dateDebut, dateFin, stationId);
		return this.polluantRepository.findByDateDebutGreaterThanEqualAndDateFinLessThanEqualAndStationCommuneId(dateDebut, dateFin, idCommune);
	}

	/**
	 * Permet de vérifier si un polluant polluantToCheck passé en param a déjà été
	 * persisté en BDD
	 * 
	 * @param polluantToCheck
	 * @return True si il existe, false sinon
	 */
	public boolean checkExistencePolluantBDD(Polluant polluantToCheck) {
		List<Polluant> polluantsSimilaireExistants = this.getPolluantByIdStationAndNomAndDateDebut(polluantToCheck.getStation().getId(), 
																									polluantToCheck.getNom(),
																									polluantToCheck.getDateDebut() );
		if ( polluantsSimilaireExistants.size() > 0) {
			return true;
		} else {
			return false;
		}
		
	}
}
